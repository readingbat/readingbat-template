plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    google()
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

def mainName = 'ContentServer'
def appName = 'server'

// This is for ./gradlew run
application {
    mainClassName = mainName
}

description 'ReadingBat Site'
group 'com.github.readingbat'
version '1.5.0'

dependencies {
    implementation "com.github.readingbat:readingbat-core:$readingbat_version"
    implementation "com.github.pambrose.common-utils:core-utils:$utils_version"
    implementation "io.github.oshai:kotlin-logging-jvm:$logging_version"
}

tasks.register('stage') { dependsOn['uberjar', 'build', 'clean'] }
build.mustRunAfter clean

shadowJar {
    zip64 true
    mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude "LICENSE*"
}

tasks.register('uberjar', Jar) {
    dependsOn shadowJar
    zip64 true
    archiveFileName = 'server.jar'
    manifest {
        attributes('Implementation-Title': appName)
        attributes('Implementation-Version': version)
        attributes('Built-Date': new Date())
        attributes('Built-JDK': System.getProperty('java.version'))
        attributes('Main-Class': mainName)
    }
    from zipTree(shadowJar.archiveFile)
}

kotlin {
    jvmToolchain(17)
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}